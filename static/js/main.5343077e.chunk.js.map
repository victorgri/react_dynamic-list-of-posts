{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/posts.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","selectedPost","setSelectedPost","setCreateNewComment","resetSelectedPost","undefined","className","map","post","id","title","type","onClick","selectPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","deleteCommentData","NewCommentForm","postId","setPostComments","setErrorMessage","useState","loader","setLoader","name","email","formComment","setFormComment","nameError","emailError","bodyError","formErrors","setFormErrors","handleChange","event","target","value","prev","addNewComment","a","newComment","trim","serverComment","prevComments","handleAddComment","preventDefault","error","onSubmit","htmlFor","placeholder","classNames","onChange","PostDetails","createNewComment","postComments","errorMessage","useEffect","catch","finally","deleteComment","commentId","temporaryComments","filter","comment","length","commentBody","href","UserSelector","users","selectedUser","setSelectedUser","isActiveDropDown","setIsActiveDropDown","onBlur","role","user","chooseUser","App","setUsers","setUserPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5343077e.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  userPosts: Post[];\n  selectedPost: Post | undefined;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | undefined>>;\n  setCreateNewComment: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  selectedPost,\n  setSelectedPost = () => {},\n  setCreateNewComment = () => {},\n}) => {\n  const selectPost = (post: Post) => {\n    setSelectedPost(post);\n    setCreateNewComment(false);\n  };\n\n  const resetSelectedPost = () => {\n    setSelectedPost(undefined);\n    setCreateNewComment(false);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map((post) => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">{title}</td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  {selectedPost && selectedPost.id === id ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-blue\"\n                      onClick={resetSelectedPost}\n                    >\n                      Close\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => selectPost(post)}\n                    >\n                      Open\n                    </button>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsData = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getUsersData = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getCommentsData = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postCommentData = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteCommentData = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { postCommentData } from '../api/posts';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number;\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setErrorMessage: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ntype GenericObjectFields = {\n  [key: string]: string;\n};\n\ntype GenericObjectErrors = {\n  [key: string]: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setPostComments = () => {},\n  setErrorMessage = () => {},\n}) => {\n  const [loader, setLoader] = useState<boolean>(false);\n\n  const [formComment, setFormComment] = useState<GenericObjectFields>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [formErrors, setFormErrors] = useState<GenericObjectErrors>({\n    nameError: false,\n    emailError: false,\n    bodyError: false,\n  });\n\n  const handleChange = (\n    event:\n    | React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setFormComment((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    setFormErrors((prev) => ({\n      ...prev,\n      [`${name}Error`]: false,\n    }));\n  };\n\n  const resetFormClear = () => {\n    setFormComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setFormErrors({\n      nameError: false,\n      emailError: false,\n      bodyError: false,\n    });\n  };\n\n  const resetFormAdd = () => {\n    setFormComment((prev) => ({\n      ...prev,\n      name: '',\n      email: '',\n    }));\n\n    setFormErrors((prev) => ({\n      ...prev,\n      nameError: false,\n      emailError: false,\n    }));\n  };\n\n  const addNewComment = async () => {\n    setLoader(true);\n\n    try {\n      const { name, email, body } = formComment;\n\n      const newComment = {\n        postId,\n        name: name.trim(),\n        email: email.trim(),\n        body: body.trim(),\n      };\n\n      const serverComment = await postCommentData(newComment);\n\n      setPostComments((prevComments) => [...prevComments, serverComment]);\n\n      resetFormAdd();\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setLoader(false);\n    }\n  };\n\n  const handleAddComment = (\n    event:\n    | React.FormEvent<HTMLFormElement>\n    | React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n\n    let error = false;\n\n    if (!formComment.name.trim()) {\n      setFormErrors((prev) => ({\n        ...prev,\n        nameError: true,\n      }));\n\n      error = true;\n    }\n\n    if (!formComment.email.trim()) {\n      setFormErrors((prev) => ({\n        ...prev,\n        emailError: true,\n      }));\n\n      error = true;\n    }\n\n    if (!formComment.body.trim()) {\n      setFormErrors((prev) => ({\n        ...prev,\n        bodyError: true,\n      }));\n\n      error = true;\n    }\n\n    if (error) {\n      return;\n    }\n\n    addNewComment();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': formErrors.nameError,\n            })}\n            value={formComment.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.nameError && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Name is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': formErrors.emailError,\n            })}\n            value={formComment.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.emailError && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', {\n              'is-danger': formErrors.bodyError,\n            })}\n            value={formComment.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {formErrors.bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': loader,\n            })}\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetFormClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteCommentData, getCommentsData } from '../api/posts';\n\ninterface Props {\n  selectedPost: Post;\n  createNewComment: boolean;\n  setCreateNewComment: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  createNewComment,\n  setCreateNewComment = () => {},\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [loader, setLoader] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<boolean>(false);\n\n  useEffect(() => {\n    setLoader(true);\n    setErrorMessage(false);\n\n    getCommentsData(selectedPost.id)\n      .then(setPostComments)\n      .catch(() => setErrorMessage(true))\n      .finally(() => setLoader(false));\n  }, [selectedPost]);\n\n  const createNewCommentForm = () => {\n    setCreateNewComment(true);\n  };\n\n  const deleteComment = async (commentId: number) => {\n    const temporaryComments = [...postComments];\n\n    setPostComments((prevComments) => prevComments\n      .filter((comment) => comment.id !== commentId));\n\n    try {\n      await deleteCommentData(commentId);\n    } catch {\n      setPostComments(temporaryComments);\n    }\n  };\n\n  const { id, title, body } = selectedPost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${id}: ${title}`}</h2>\n\n          <p data-cy=\"PostBody\">{body}</p>\n        </div>\n\n        <div className=\"block\">\n          {loader && <Loader />}\n\n          {errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!loader\n            && !errorMessage\n            && postComments\n            && postComments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!errorMessage && postComments && postComments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map((comment) => {\n                const {\n                  id: commentId,\n                  name,\n                  email,\n                  body: commentBody,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={commentId}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => deleteComment(commentId)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {commentBody}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {!errorMessage\n            && (createNewComment ? (\n              <NewCommentForm\n                postId={id}\n                setPostComments={setPostComments}\n                setErrorMessage={setErrorMessage}\n              />\n            ) : (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={createNewCommentForm}\n              >\n                Write a comment\n              </button>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  users: User[];\n  selectedUser: User | undefined;\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | undefined>>;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | undefined>>;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser = () => {},\n  setSelectedPost = () => {},\n}) => {\n  const [isActiveDropDown, setIsActiveDropDown] = useState<boolean>(false);\n\n  const changeDropDownState = () => {\n    setIsActiveDropDown(!isActiveDropDown);\n  };\n\n  const closeDropDown = () => {\n    setTimeout(() => {\n      setIsActiveDropDown(false);\n    }, 150); // Maybe more\n  };\n\n  const chooseUser = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(undefined);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isActiveDropDown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={changeDropDownState}\n          onBlur={closeDropDown}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className=\"dropdown-item\"\n                onClick={() => chooseUser(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getPostsData, getUsersData } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [selectedPost, setSelectedPost] = useState<Post>();\n  const [loader, setLoader] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<boolean>(false);\n  const [createNewComment, setCreateNewComment] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsersData()\n      .then(setUsers)\n      .catch(() => setErrorMessage(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoader(true);\n      setErrorMessage(false);\n\n      getPostsData(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => setErrorMessage(true))\n        .finally(() => setLoader(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {loader && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser\n                  && userPosts.length === 0\n                  && !errorMessage\n                  && !loader && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUser && userPosts.length > 0 && (\n                  <PostsList\n                    userPosts={userPosts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setCreateNewComment={setCreateNewComment}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  createNewComment={createNewComment}\n                  setCreateNewComment={setCreateNewComment}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}