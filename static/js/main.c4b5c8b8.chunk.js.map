{"version":3,"sources":["components/PostsList.tsx","types/Errors.ts","utils/fetchClient.ts","utils/apiActions.ts","components/Loader/Loader.tsx","types/FormError.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","onPost","selectedPost","onSelectedPost","_jsxs","children","_jsx","className","map","post","isButtonOpen","id","title","onClick","type","Errors","request","url","delay","data","arguments","length","undefined","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","apiActions","catch","e","Error","concat","Loader","FormErrors","NewCommentForm","onComments","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","comment","setComment","_useState7","None","_useState8","nameError","setNameError","_useState9","_useState10","emailError","setEmailError","_useState11","_useState12","commentError","setCommentError","_useState13","_useState14","isSubmitLoading","setIsSubmitLoading","validate","value","trim","htmlFor","placeholder","cn","onChange","target","preventDefault","isNameValid","isEmailValid","isCommentValid","Name","Email","Comment","postId","newComment","currentComments","_toConsumableArray","finally","submit","PostDetails","isForm","setIsForm","isCommentsLoading","setIsCommentsLoading","commentsError","setIsCommentsError","postComments","setPostComments","useEffect","commentsFromServer","Comments","isAnyComments","isShow","noCommentsYet","comments","writeCommentButton","_Fragment","href","newComments","filter","c","UserSelector","users","selectedUser","isDropdownActive","setIsDropdownActive","role","tabIndex","onFocus","onBlur","onMouseDown","user","App","setUsers","setSelectedUser","userPosts","setUserPosts","isPostsLoading","setIsPostsLoading","isAnyPosts","setSelectedPost","usersError","setUsersError","postsError","setPostsError","noPostYet","postList","usersFromServer","Users","Posts","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4b5c8b8.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onPost: (data: Post) => void;\n  selectedPost: Post | null;\n  onSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onPost,\n  selectedPost,\n  onSelectedPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th>.</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            const isButtonOpen = selectedPost !== post;\n\n            return (\n              <tr data-cy=\"Post\" key={post.id}>\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">{post.title}</td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  {isButtonOpen ? (\n                    <button\n                      onClick={() => onPost(post)}\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                    >\n                      Open\n                    </button>\n                  ) : (\n                    <button\n                      onClick={() => onSelectedPost(null)}\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                    >\n                      Close\n                    </button>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","export enum Errors {\n  Users = 'Error loading users',\n  Posts = 'Error loading posts',\n  None = '',\n  Comments = 'Error loading comments',\n}\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\ntype MateApiData = Comment\n| Post\n| CommentData\n| User\n| Comment[]\n| Post[]\n| User[]\n| null;\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: MateApiData = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: MateApiData) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: MateApiData) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const apiActions = {\n  getAllUsers: () => {\n    return client.get<User[]>('/users').catch((e) => {\n      throw new Error(e);\n    });\n  },\n\n  getUserPosts: (id: number) => {\n    return client.get<Post[]>(`/posts?userId=${id}`);\n  },\n\n  getPostComments: (id: number) => {\n    return client.get<Comment[]>(`/comments?postId=${id}`);\n  },\n\n  addComment: (data: CommentData) => {\n    return client.post<Comment>('/comments', data);\n  },\n\n  deleteComment: (id: number) => {\n    return client.delete(`/comments/${id}`);\n  },\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum FormErrors {\n  None = '',\n  Name = 'Name is required',\n  Email = 'Email is required',\n  Comment = 'Enter some text',\n}\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { Comment } from '../types/Comment';\nimport { FormErrors } from '../types/FormError';\nimport { apiActions } from '../utils/apiActions';\n\ntype Props = {\n  onComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  id: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onComments, id }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const [nameError, setNameError] = useState(FormErrors.None);\n  const [emailError, setEmailError] = useState(FormErrors.None);\n  const [commentError, setCommentError] = useState(FormErrors.None);\n\n  const [isSubmitLoading, setIsSubmitLoading] = useState(false);\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setNameError(FormErrors.None);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setEmailError(FormErrors.None);\n  };\n\n  const handleCommentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment(e.target.value);\n    setCommentError(FormErrors.None);\n  };\n\n  const validate = (value: string) => {\n    const trimValue = value.trim();\n\n    return trimValue.length > 0;\n  };\n\n  const resetError = () => {\n    setCommentError(FormErrors.None);\n    setEmailError(FormErrors.None);\n    setNameError(FormErrors.None);\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const submit = () => {\n    const isNameValid = validate(name);\n    const isEmailValid = validate(email);\n    const isCommentValid = validate(comment);\n\n    if (!isNameValid) {\n      setNameError(FormErrors.Name);\n    }\n\n    if (!isEmailValid) {\n      setEmailError(FormErrors.Email);\n    }\n\n    if (!isCommentValid) {\n      setCommentError(FormErrors.Comment);\n    }\n\n    if (isNameValid && isEmailValid && isCommentValid) {\n      setIsSubmitLoading(true);\n      apiActions\n        .addComment({\n          postId: id,\n          name,\n          email,\n          body: comment,\n        })\n        .then((newComment) => {\n          onComments((currentComments) => [...currentComments, newComment]);\n          setComment('');\n        })\n        .finally(() => setIsSubmitLoading(false));\n    }\n  };\n\n  const handleSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    submit();\n  };\n\n  const handleReset = () => {\n    reset();\n    resetError();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': nameError })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {nameError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': emailError })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {emailError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': commentError })}\n            value={comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {commentError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            onClick={handleSubmit}\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': isSubmitLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            onClick={handleReset}\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Errors } from '../types/Errors';\nimport { Post } from '../types/Post';\nimport { apiActions } from '../utils/apiActions';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isForm, setIsForm] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [commentsError, setIsCommentsError] = useState(Errors.None);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n\n  useEffect(() => {\n    setIsCommentsLoading(true);\n\n    apiActions\n      .getPostComments(post.id)\n      .then((commentsFromServer) => {\n        setPostComments(commentsFromServer);\n      })\n      .catch(() => setIsCommentsError(Errors.Comments))\n      .finally(() => setIsCommentsLoading(false));\n  }, [post]);\n\n  const isAnyComments = postComments.length > 0;\n\n  const isShow = {\n    commentsError: commentsError && !isCommentsLoading,\n    noCommentsYet: !isAnyComments && !commentsError && !isCommentsLoading,\n    comments: isAnyComments && !commentsError && !isCommentsLoading,\n    writeCommentButton: !isForm && !commentsError && !isCommentsLoading,\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${post.id}: ${post.title}`}</h2>\n\n          <p data-cy=\"PostBody\">{post.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {isShow.commentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {commentsError}\n            </div>\n          )}\n\n          {isShow.noCommentsYet && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isShow.comments && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map((comment) => {\n                const handleCommentDeleteClick = () => {\n                  const newComments = [...postComments].filter(\n                    (c) => c.id !== comment.id,\n                  );\n\n                  setPostComments(newComments);\n\n                  apiActions.deleteComment(comment.id);\n                };\n\n                return (\n                  <article\n                    key={comment.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        onClick={handleCommentDeleteClick}\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n          {isShow.writeCommentButton && (\n            <button\n              onClick={() => setIsForm(true)}\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isForm && <NewCommentForm onComments={setPostComments} id={post.id} />}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onPost: (data: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onPost,\n  selectedUser,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isDropdownActive })}\n      role=\"button\"\n      tabIndex={0}\n      onFocus={() => setIsDropdownActive(true)}\n      onBlur={() => setIsDropdownActive(false)}\n      onMouseDown={() => setIsDropdownActive(!isDropdownActive)}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          {selectedUser ? (\n            <span>{selectedUser.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            const handleUserLinkClick = (\n              e: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n            ) => {\n              e.preventDefault();\n              onPost(user);\n              setIsDropdownActive(false);\n            };\n\n            return (\n              <a\n                key={user.id}\n                onClick={handleUserLinkClick}\n                href={`user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': user === selectedUser,\n                })}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { apiActions } from './utils/apiActions';\nimport { Errors } from './types/Errors';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n\n  const isAnyPosts = userPosts.length > 0;\n\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [usersError, setUsersError] = useState(Errors.None);\n  const [postsError, setPostsError] = useState(Errors.None);\n\n  const getPosts = (user: User) => {\n    setSelectedPost(null);\n    setPostsError(Errors.None);\n    setIsPostsLoading(true);\n    setSelectedUser(user);\n\n    apiActions\n      .getUserPosts(user.id)\n      .then(setUserPosts)\n      .catch(() => setPostsError(Errors.Posts))\n      .finally(() => setIsPostsLoading(false));\n  };\n\n  const getPost = (post: Post) => {\n    setSelectedPost(post);\n  };\n\n  const isShow = {\n    noPostYet: !isAnyPosts && selectedUser && !isPostsLoading && !postsError,\n    postList: isAnyPosts && selectedUser && !isPostsLoading && !postsError,\n  };\n\n  useEffect(() => {\n    apiActions\n      .getAllUsers()\n      .then((usersFromServer) => {\n        setUsers(usersFromServer);\n      })\n      .catch(() => {\n        setUsersError(Errors.Users);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onPost={getPosts}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {usersError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"UsersLoadingError\"\n                  >\n                    {usersError}\n                  </div>\n                )}\n\n                {postsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {postsError}\n                  </div>\n                )}\n\n                {isShow.noPostYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {isShow.postList && (\n                  <PostsList\n                    posts={userPosts}\n                    onPost={getPost}\n                    selectedPost={selectedPost}\n                    onSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} key={selectedPost.id} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}